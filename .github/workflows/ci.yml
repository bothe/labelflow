name: CI
on:
  pull_request:
    branches:
      - main
      - "feature/**"
      - enhancement/delete-service-worker
  push:
    branches:
      - main
jobs:
  install-typescript:
    name: Install Typescript packages
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Fetch/Save yarn cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{secrets.ACTIONS_CACHE_VERSION}}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Fetch/Save cypress cache
        uses: actions/cache@v2
        id: cypress-cache
        with:
          path: /home/runner/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{secrets.ACTIONS_CACHE_VERSION}}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-cypress-
      - name: install dependencies
        run: yarn install --immutable
      - name: generate prisma
        run: cd typescript/db && yarn generate
      - name: Ensure node_modules are up to date in the cache
        uses: actions/cache@v2
        id: node-modules-cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{secrets.ACTIONS_CACHE_VERSION}}-${{ hashFiles('yarn.lock') }}

  lint-typescript:
    name: Lint TypeScript code
    runs-on: ubuntu-20.04
    needs: install-typescript
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Fetch node_modules from cache
        uses: actions/cache@v2
        id: node-modules-cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{secrets.ACTIONS_CACHE_VERSION}}-${{ hashFiles('yarn.lock') }}
      - name: Generate code
        run: yarn codegen
      - name: Lint project code
        run: yarn lint:ts

  lint-markdown:
    name: Lint Markdown code
    runs-on: ubuntu-20.04
    needs: install-typescript
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Fetch node_modules from cache
        uses: actions/cache@v2
        id: node-modules-cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{secrets.ACTIONS_CACHE_VERSION}}-${{ hashFiles('yarn.lock') }}
      - name: Lint markdown files
        run: yarn lint:md

  lint-python:
    name: Lint Python code
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2.2.2
        with:
          python-version: 3.8
      - name: Install Black
        run: pip install black==22.3.0
      - name: Run black --check .
        run: black --check .
      # - name: If needed, commit black changes to the pull request
      #   if: failure()
      #   run: |
      #     black .
      #     git config --global user.name 'autoblack'
      #     git config --global user.email 'cclauss@users.noreply.github.com'
      #     git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
      #     git checkout $GITHUB_HEAD_REF
      #     git commit -am "fixup: Format Python code with Black"
      #     git push

  test-typescript:
    name: Unit Tests Typescript code
    runs-on: ubuntu-20.04
    needs: install-typescript
    services:
      db:
        image: postgres:12.6
        env:
          POSTGRES_USER: ${{secrets.POSTGRES_ADMIN_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_ADMIN_PASSWORD}}
          POSTGRES_DB: ${{secrets.POSTGRES_DB}}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    env:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      # https://github.com/aws/aws-cli/issues/5262#issuecomment-705832151
      AWS_EC2_METADATA_DISABLED: true
      NODE_OPTIONS: "--max_old_space_size=4096"
    steps:
      # GitHub Services doesn't let us forward a command when starting the docker container
      # and we need to run minio like this `docker start minio/minio server /data`.
      # And, as of today, there are no easy way to pass the `server /data` part.
      # Therefore, we start minio in docker manually
      - name: Setup storage with minio
        run: |
          docker run -d \
                     --name minio \
                     -p 9000:9000 \
                     -e MINIO_ROOT_USER=$MINIO_ACCESS_KEY \
                     -e MINIO_ROOT_PASSWORD=$MINIO_SECRET_KEY \
                     minio/minio server /data
      - name: Create labelflow bucket on minio
        run: aws --endpoint-url http://127.0.0.1:9000/ s3 mb s3://labelflow
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Fetch node_modules from cache
        uses: actions/cache@v2
        id: node-modules-cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{secrets.ACTIONS_CACHE_VERSION}}-${{ hashFiles('yarn.lock') }}
      - name: check node_modules
        run: ls typescript/web/node_modules
      - name: generate prisma
        run: cd typescript/db && yarn deploy && yarn generate
        env:
          POSTGRES_EXTERNAL_URL: postgresql://admin:admin@localhost:5433/labelflow?schema=public
      - name: Generate code
        run: yarn codegen
      - name: run tests
        run: yarn test --coverage
        env:
          POSTGRES_EXTERNAL_URL: postgresql://admin:admin@localhost:5433/labelflow?schema=public
      - name: Publish code-coverage output to CodeClimate
        uses: paambaati/codeclimate-action@v3.0.0
        env:
          CC_TEST_REPORTER_ID: ${{secrets.CC_TEST_REPORTER_ID}}
        with:
          coverageLocations: |
            coverage/lcov.info:lcov

  check-codegen-diff:
    name: Check diff after codegen
    runs-on: ubuntu-20.04
    needs: install-typescript
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Fetch node_modules from cache
        uses: actions/cache@v2
        id: node-modules-cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{secrets.ACTIONS_CACHE_VERSION}}-${{ hashFiles('yarn.lock') }}
      - name: Generate code and check for uncommitted changes
        run: yarn codegen:ci
      - name: Check for failure
        if: ${{ failure() }}
        run: echo "::error::Codegen diff detected, please commit your schema changes." && exit 1

  e2e-analysis:
    name: E2E Tests and bundle analysis
    runs-on: ubuntu-20.04
    needs: install-typescript
    services:
      db:
        image: postgres:12.6
        env:
          POSTGRES_USER: ${{secrets.POSTGRES_ADMIN_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_ADMIN_PASSWORD}}
          POSTGRES_DB: ${{secrets.POSTGRES_DB}}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    env:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      # https://github.com/aws/aws-cli/issues/5262#issuecomment-705832151
      AWS_EC2_METADATA_DISABLED: true
    steps:
      # GitHub Services doesn't let us forward a command when starting the docker container
      # and we need to run minio like this `docker start minio/minio server /data`.
      # And, as of today, there are no easy way to pass the `server /data` part.
      # Therefore, we start minio in docker manually
      - name: Setup storage with minio
        run: |
          docker run -d \
                     --name minio \
                     -p 9000:9000 \
                     -e MINIO_ROOT_USER=$MINIO_ACCESS_KEY \
                     -e MINIO_ROOT_PASSWORD=$MINIO_SECRET_KEY \
                     minio/minio server /data
      - name: Create labelflow bucket on minio
        run: aws --endpoint-url http://127.0.0.1:9000/ s3 mb s3://labelflow
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Fetch node_modules from cache
        uses: actions/cache@v2
        id: node-modules-cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{secrets.ACTIONS_CACHE_VERSION}}-${{ hashFiles('yarn.lock') }}
      - name: Fetch/Save cypress cache
        uses: actions/cache@v2
        id: cypress-cache
        with:
          path: /home/runner/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{secrets.ACTIONS_CACHE_VERSION}}-${{ hashFiles('yarn.lock') }}
      - name: generate prisma
        run: cd typescript/db && yarn deploy && yarn generate
        env:
          POSTGRES_EXTERNAL_URL: postgresql://admin:admin@localhost:5433/labelflow?schema=public
      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          install: false
          build: yarn bundlewatch:web
          start: yarn start:web -p 3001
          wait-on: "http://localhost:3001"
          wait-on-timeout: 300
          browser: chrome
          record: true
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}
          # Bundlewatch
          # See https://bundlewatch.io/#/getting-started/using-bundlewatch?id=setup-ci-auth-variables-needed-by-bundlewatch
          BUNDLEWATCH_GITHUB_TOKEN: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}
          CI_REPO_OWNER: labelflow
          CI_REPO_NAME: labelflow
          CI_COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
          CI_BRANCH: ${{ github.ref	}}
          CI_BRANCH_BASE: refs/heads/main
          POSTGRES_EXTERNAL_URL: postgresql://admin:admin@localhost:5433/labelflow?schema=public
          VERCEL_URL: http://localhost:3001
          LABELFLOW_AWS_ACCESS_KEY_ID: minioadmin
          LABELFLOW_AWS_SECRET_ACCESS_KEY: minioadmin
          LABELFLOW_AWS_REGION: eu-west-1
          LABELFLOW_AWS_ENDPOINT: http://localhost:9000
          JWT_SECRET: 9W3LaNVnxT9UOaPWZHIyrAVu3ndIbBsLme3Ttq+WNoQ=

  deployment-chromatic-pr:
    name: Deploy Storybook PR
    if: "! contains( github.ref, 'main')"
    runs-on: ubuntu-20.04
    needs: install-typescript
    # Job steps
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # 👈 Required to retrieve git history
      - name: Fetch node_modules from cache
        uses: actions/cache@v2
        id: node-modules-cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{secrets.ACTIONS_CACHE_VERSION}}-${{ hashFiles('yarn.lock') }}
      - name: Generate code
        run: yarn codegen
      - name: Publish to Chromatic
        uses: chromaui/action@v1
        # Chromatic GitHub Action options
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # 👇 Chromatic projectToken, refer to the manage page to obtain it.
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}

  # # Code to deploy to vercel with a github action (instead of automatically using vercel github integration)
  # deploy-webapp-pr:
  #   name: Deploy webapp PR branch
  #   if: "! contains( github.ref, 'main')"
  #   runs-on: ubuntu-20.04
  #   needs: install-typescript
  #   steps:
  #     - name: start deployment
  #       uses: bobheadxi/deployments@v0.4.3
  #       id: deployment
  #       with:
  #         step: start
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         env: "Preview – labelflow"
  #         ref: ${{ github.head_ref }}
  #         no_override: false
  #     - name: Check out repository code
  #       uses: actions/checkout@v2
  #     - name: Deploy webapp on Vercel
  #       uses: amondnet/vercel-action@v20
  #       id: vercel
  #       with:
  #         scope: ${{ secrets.VERCEL_ORG_ID}}
  #         vercel-token: ${{ secrets.VERCEL_TOKEN }} # Required
  #         github-token: ${{ secrets.GITHUB_TOKEN }} #Optional
  #         vercel-args: "" #Optional
  #         vercel-org-id: ${{ secrets.VERCEL_ORG_ID}} #Required
  #         vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_WEBAPP}} #Required
  #         vercel-project-name: "labelflow"
  #         # working-directory: ./typescript/web
  #         working-directory: .
  #         # alias-domains: | #Optional
  #         #   app.labelflow.ai
  #         #   pr{{PR_NUMBER}}.beta.labelflow.ai
  #         alias-domains: | #Optional
  #           pr{{PR_NUMBER}}.beta.labelflow.ai
  #     - run: npx vercel logs ${{steps.vercel.outputs.preview-url}} --token ${{ secrets.VERCEL_TOKEN }}
  #     - name: update deployment status
  #       uses: bobheadxi/deployments@v0.4.3
  #       if: always()
  #       with:
  #         step: finish
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         status: ${{ job.status }}
  #         deployment_id: ${{ steps.deployment.outputs.deployment_id }}
  #         env_url: ${{steps.vercel.outputs.preview-url}}

  deploy-chromatic-main:
    name: Deploy Storybook production
    if: contains( github.ref, 'main')
    runs-on: ubuntu-20.04
    needs: [
      lint-typescript,
      lint-python,
      test-typescript,
      check-codegen-diff,
      e2e-analysis,
    ]
    # Job steps
    steps:
      - uses: actions/checkout@v2
        with:
          # Needed to make sure it doesn't checkout the commit which triggered the workflow but the release one.
          ref: main
          fetch-depth: 0 # 👈 Required to retrieve git history
      - name: Fetch node_modules from cache
        uses: actions/cache@v2
        id: node-modules-cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{secrets.ACTIONS_CACHE_VERSION}}-${{ hashFiles('yarn.lock') }}
      - name: Generate code
        run: yarn codegen
      - name: Publish to Chromatic
        uses: chromaui/action@v1
        # Chromatic GitHub Action options
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # 👇 Chromatic projectToken, refer to the manage page to obtain it.
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}

  deploy-strapi-main:
    name: Deploy Strapi on Heroku production
    if: contains( github.ref, 'main')
    runs-on: ubuntu-20.04
    needs: [
      lint-typescript,
      lint-python,
      test-typescript,
      check-codegen-diff,
      e2e-analysis,
    ]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          # Needed to make sure it doesn't checkout the commit which triggered the workflow but the release one.
          ref: main
      - name: Deploy to Heroku
        # See https://github.com/marketplace/actions/deploy-to-heroku#deploy-subdirectory
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "labelflow-strapi"
          heroku_email: "vincent.lecrubier@labelflow.ai"
          team: "labelflow"
          appdir: "strapi"

  # # Code to deploy to vercel with a github action (instead of automatically using vercel github integration)
  # deploy-webapp-main:
  #   name: Deploy webapp to production
  #   if: contains( github.ref, 'main')
  #   runs-on: ubuntu-20.04
  #   needs: bump-version
  #   steps:
  #     - name: start deployment
  #       uses: bobheadxi/deployments@v0.4.3
  #       id: deployment
  #       with:
  #         step: start
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         env: "Production – labelflow"
  #         ref: ${{ github.head_ref }}
  #         no_override: true
  #     - name: Check out repository code
  #       uses: actions/checkout@v2
  #       with:
  #         # Needed to make sure it doesn't checkout the commit which triggered the workflow but the release one.
  #         ref: main
  #     - name: Deploy webapp on Vercel
  #       uses: amondnet/vercel-action@v20
  #       id: vercel
  #       with:
  #         scope: ${{ secrets.VERCEL_ORG_ID}}
  #         vercel-token: ${{ secrets.VERCEL_TOKEN }} # Required
  #         github-token: ${{ secrets.GITHUB_TOKEN }} #Optional
  #         vercel-args: "--prod" #Optional
  #         vercel-org-id: ${{ secrets.VERCEL_ORG_ID}} #Required
  #         vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_WEBAPP}} #Required
  #         vercel-project-name: "labelflow"
  #         # working-directory: ./typescript/web
  #         working-directory: .
  #         # alias-domains: | #Optional
  #         #   app.labelflow.ai
  #         #   pr{{PR_NUMBER}}.beta.labelflow.ai
  #         alias-domains: | #Optional
  #           labelflow.ai
  #     - run: npx vercel logs ${{steps.vercel.outputs.preview-url}} --token ${{ secrets.VERCEL_TOKEN }}
  #     - name: update deployment status
  #       uses: bobheadxi/deployments@v0.4.3
  #       if: always()
  #       with:
  #         step: finish
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         status: ${{ job.status }}
  #         deployment_id: ${{ steps.deployment.outputs.deployment_id }}
  #         env_url: ${{steps.vercel.outputs.preview-url}}
